{
  "version": 3,
  "sources": ["../../register-service-worker/index.js"],
  "sourcesContent": ["// Register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\nvar isLocalhost = function () { return Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n); }\r\n\r\nvar waitWindowLoad\r\n// https://github.com/yyx990803/register-service-worker/pull/33#discussion_r394181861\r\nif (typeof window !== 'undefined') {\r\n  // Typically, a browser that supports `serviceWorker` should also have supported\r\n  // `Promise`. But as this package can be used in environments without service\r\n  // worker support (in that case it would do nothing), there's a chance that\r\n  // `Promise` does not exist. So we must check for its existence first.\r\n  if (typeof Promise !== 'undefined') {\r\n    waitWindowLoad = new Promise(function (resolve) { return window.addEventListener('load', resolve); })\r\n  } else {\r\n    waitWindowLoad = { then: function (cb) { return window.addEventListener('load', cb); } }\r\n  }\r\n}\r\n\r\nexport function register (swUrl, hooks) {\r\n  if ( hooks === void 0 ) hooks = {};\r\n\r\n  var registrationOptions = hooks.registrationOptions; if ( registrationOptions === void 0 ) registrationOptions = {};\r\n  delete hooks.registrationOptions\r\n\r\n  var emit = function (hook) {\r\n    var args = [], len = arguments.length - 1;\r\n    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\r\n\r\n    if (hooks && hooks[hook]) {\r\n      hooks[hook].apply(hooks, args)\r\n    }\r\n  }\r\n\r\n  if ('serviceWorker' in navigator) {\r\n    waitWindowLoad.then(function () {\r\n      if (isLocalhost()) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, emit, registrationOptions)\r\n        navigator.serviceWorker.ready.then(function (registration) {\r\n          emit('ready', registration)\r\n        }).catch(function (error) { return handleError(emit, error); })\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, emit, registrationOptions)\r\n        navigator.serviceWorker.ready.then(function (registration) {\r\n          emit('ready', registration)\r\n        }).catch(function (error) { return handleError(emit, error); })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction handleError (emit, error) {\r\n  if (!navigator.onLine) {\r\n    emit('offline')\r\n  }\r\n  emit('error', error)\r\n}\r\n\r\nfunction registerValidSW (swUrl, emit, registrationOptions) {\r\n  navigator.serviceWorker\r\n    .register(swUrl, registrationOptions)\r\n    .then(function (registration) {\r\n      emit('registered', registration)\r\n      if (registration.waiting) {\r\n        emit('updated', registration)\r\n        return\r\n      }\r\n      registration.onupdatefound = function () {\r\n        emit('updatefound', registration)\r\n        var installingWorker = registration.installing\r\n        installingWorker.onstatechange = function () {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              emit('updated', registration)\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              emit('cached', registration)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(function (error) { return handleError(emit, error); })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, emit, registrationOptions) {\r\n  // Check if the service worker can be found.\r\n  fetch(swUrl)\r\n    .then(function (response) {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (response.status === 404) {\r\n        // No service worker found.\r\n        emit('error', new Error((\"Service worker not found at \" + swUrl)))\r\n        unregister()\r\n      } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\r\n        emit('error', new Error(\r\n          \"Expected \" + swUrl + \" to have javascript content-type, \" +\r\n          \"but received \" + (response.headers.get('content-type'))))\r\n        unregister()\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, emit, registrationOptions)\r\n      }\r\n    })\r\n    .catch(function (error) { return handleError(emit, error); })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(function (registration) {\r\n      registration.unregister()\r\n    }).catch(function (error) { return handleError(emit, error); })\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["emit"]
}
